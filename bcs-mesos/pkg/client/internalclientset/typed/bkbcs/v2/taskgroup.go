/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by client-gen. DO NOT EDIT.

package v2

import (
	v2 "bk-bcs/bcs-mesos/pkg/apis/bkbcs/v2"
	scheme "bk-bcs/bcs-mesos/pkg/client/internalclientset/scheme"
	"time"

	"bk-bcs/bcs-common/common/blog"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// TaskGroupsGetter has a method to return a TaskGroupInterface.
// A group's client should implement this interface.
type TaskGroupsGetter interface {
	TaskGroups(namespace string) TaskGroupInterface
}

// TaskGroupInterface has methods to work with TaskGroup resources.
type TaskGroupInterface interface {
	Create(*v2.TaskGroup) (*v2.TaskGroup, error)
	Update(*v2.TaskGroup) (*v2.TaskGroup, error)
	UpdateStatus(*v2.TaskGroup) (*v2.TaskGroup, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v2.TaskGroup, error)
	List(opts v1.ListOptions) (*v2.TaskGroupList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v2.TaskGroup, err error)
	TaskGroupExpansion
}

// taskGroups implements TaskGroupInterface
type taskGroups struct {
	client rest.Interface
	ns     string
}

// newTaskGroups returns a TaskGroups
func newTaskGroups(c *BkbcsV2Client, namespace string) *taskGroups {
	return &taskGroups{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the taskGroup, and returns the corresponding taskGroup object, and an error if there is any.
func (c *taskGroups) Get(name string, options v1.GetOptions) (result *v2.TaskGroup, err error) {
	result = &v2.TaskGroup{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("taskgroups").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of TaskGroups that match those selectors.
func (c *taskGroups) List(opts v1.ListOptions) (result *v2.TaskGroupList, err error) {
	result = &v2.TaskGroupList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("taskgroups").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested taskGroups.
func (c *taskGroups) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("taskgroups").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a taskGroup and creates it.  Returns the server's representation of the taskGroup, and an error, if there is any.
func (c *taskGroups) Create(taskGroup *v2.TaskGroup) (result *v2.TaskGroup, err error) {
	result = &v2.TaskGroup{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("taskgroups").
		Body(taskGroup).
		Do().
		Into(result)
	return
}

// Update takes the representation of a taskGroup and updates it. Returns the server's representation of the taskGroup, and an error, if there is any.
func (c *taskGroups) Update(taskGroup *v2.TaskGroup) (result *v2.TaskGroup, err error) {
	now := time.Now().UnixNano()
	result = &v2.TaskGroup{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("taskgroups").
		Name(taskGroup.Name).
		Body(taskGroup).
		Do().
		Into(result)
	blog.Warnf("kube-apiserver update taskgroup(%s) time(%d)", taskGroup.Name, (time.Now().UnixNano()-now)/1000/1000)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *taskGroups) UpdateStatus(taskGroup *v2.TaskGroup) (result *v2.TaskGroup, err error) {
	result = &v2.TaskGroup{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("taskgroups").
		Name(taskGroup.Name).
		SubResource("status").
		Body(taskGroup).
		Do().
		Into(result)
	return
}

// Delete takes name of the taskGroup and deletes it. Returns an error if one occurs.
func (c *taskGroups) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("taskgroups").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *taskGroups) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("taskgroups").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched taskGroup.
func (c *taskGroups) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v2.TaskGroup, err error) {
	result = &v2.TaskGroup{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("taskgroups").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
